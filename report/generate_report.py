#!/usr/bin/env python3
"""
Ï†ïÏπò Ïù¥Ïäà HTML Î≥¥Í≥†ÏÑú ÏÉùÏÑ±Í∏∞
Substack Ïä§ÌÉÄÏùºÏùò ÎØ∏ÎãàÎ©Ä ÎîîÏûêÏù∏ÏúºÎ°ú Î™®Î∞îÏùº ÏµúÏ†ÅÌôîÎêú Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
"""

import os
import sys
import re
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏Î•º Python Í≤ΩÎ°úÏóê Ï∂îÍ∞Ä
sys.path.append(str(Path(__file__).parent.parent))

from utils.supabase_manager import SupabaseManager
from rich.console import Console

console = Console()

class ReportGenerator:
    """HTML Î≥¥Í≥†ÏÑú ÏÉùÏÑ±Í∏∞"""
    
    def __init__(self):
        """Ï¥àÍ∏∞Ìôî"""
        self.supabase_manager = SupabaseManager()
        self.reports_dir = Path(__file__).parent / "reports"
        self.reports_dir.mkdir(exist_ok=True)
        
    def generate_filename(self, date: datetime = None) -> str:
        """ÎÇ†Ïßú Í∏∞Î∞ò ÌååÏùºÎ™Ö ÏÉùÏÑ±"""
        if date is None:
            date = datetime.now()
        
        base_name = f"{date.strftime('%m%d')}_Ïù¥ÏäàÏ†ïÎ¶¨"
        counter = 1
        
        while True:
            if counter == 1:
                filename = f"{base_name}.html"
            else:
                filename = f"{base_name}({counter}).html"
            
            if not (self.reports_dir / filename).exists():
                return filename
            counter += 1
    
    def _get_article_stats(self, issue_id: str) -> Dict[str, int]:
        """Ïù¥ÏäàÎ≥Ñ Í∏∞ÏÇ¨ ÌÜµÍ≥Ñ Ï°∞Ìöå"""
        try:
            result = self.supabase_manager.client.table('issue_articles').select(
                'article_id, articles!inner(media_id, media_outlets!inner(name, bias))'
            ).eq('issue_id', issue_id).execute()
            
            if not result.data:
                return {"total": 0, "left": 0, "center": 0, "right": 0}
            
            stats = {"total": len(result.data), "left": 0, "center": 0, "right": 0}
            
            for item in result.data:
                bias = item['articles']['media_outlets']['bias']
                if bias in stats:
                    stats[bias] += 1
            
            return stats
            
        except Exception as e:
            console.print(f"‚ùå Í∏∞ÏÇ¨ ÌÜµÍ≥Ñ Ï°∞Ìöå Ïã§Ìå®: {str(e)}")
            return {"total": 0, "left": 0, "center": 0, "right": 0}
    
    def _get_default_css(self) -> str:
        """Í∏∞Î≥∏ CSS Ïä§ÌÉÄÏùº Î∞òÌôò"""
        return """
/* Ï†ÑÏ≤¥ Î†àÏù¥ÏïÑÏõÉ */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: #1a1a1a;
    background: #ffffff;
    padding: 20px;
    max-width: 800px;
    margin: 0 auto;
}

/* Ìó§Îçî */
.header {
    text-align: center;
    margin-bottom: 40px;
    padding-bottom: 20px;
    border-bottom: 2px solid #e9ecef;
}

.header h1 {
    font-size: 28px;
    font-weight: 700;
    color: #1a1a1a;
    margin-bottom: 8px;
}

.header .subtitle {
    font-size: 16px;
    color: #666666;
    font-weight: 400;
}

/* Ïù¥Ïäà Ïπ¥Îìú */
.issue-card {
    background: #ffffff;
    border: 1px solid #e9ecef;
    border-radius: 12px;
    padding: 24px;
    margin-bottom: 32px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.issue-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

/* Î∂àÎ†õ Ïä§ÌÉÄÏùº */
.bullet-list {
    line-height: 1.8;
    margin: 16px 0;
    padding-left: 20px;
}

.bullet-list li {
    margin-bottom: 12px;
    padding-bottom: 8px;
}

/* ÎçîÎ≥¥Í∏∞ Í∏∞Îä• */
.view-content {
    transition: max-height 0.3s ease;
}

.view-content.expanded {
    max-height: none;
}

.view-toggle {
    color: #1976d2;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    margin-top: 8px;
    display: inline-block;
    text-decoration: none;
    border-bottom: 1px solid transparent;
    transition: border-color 0.2s ease;
}

.view-toggle:hover {
    border-bottom-color: #1976d2;
}

/* Summary Ïä§ÌÉÄÏùº */
.summary-content {
    color: #666666;
    line-height: 1.6;
    margin-bottom: 8px;
}

.summary-content.collapsible {
    margin-top: 8px;
    padding-top: 8px;
    border-top: 1px solid #f0f0f0;
}

/* Ïù¥Ïäà Ìó§Îçî */
.issue-header {
    margin-bottom: 20px;
}

.meta-info {
    font-size: 12px;
    color: #999999;
    margin-bottom: 8px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.title {
    font-size: 20px;
    font-weight: 600;
    color: #1a1a1a;
    margin-bottom: 8px;
    line-height: 1.4;
}

.subtitle {
    font-size: 16px;
    color: #666666;
    font-weight: 400;
    line-height: 1.5;
}

/* Ï¢åÏö∞ Í¥ÄÏ†ê ÎÇòÎûÄÌûà Î∞∞Ïπò */
.side-views-container {
    display: flex;
    gap: 20px;
    margin-bottom: 24px;
}

.side-view {
    flex: 1;
    padding: 16px;
    border-radius: 12px;
    border: 1px solid #e9ecef;
    position: relative;
    transition: all 0.3s ease;
    overflow: hidden;
}

.side-view::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    transition: left 0.5s ease;
}

.side-view.left {
    background: linear-gradient(135deg, #fce4ec 0%, #f8bbd9 100%);
    border-color: rgba(25, 118, 210, 0.2);
}

.side-view.right {
    background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
    border-color: rgba(220, 53, 69, 0.2);
}

.side-view:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(0,0,0,0.1);
}

.side-view.left:hover {
    background: linear-gradient(135deg, #f8bbd9 0%, #f48fb1 100%);
    border-color: #e91e63;
}

.side-view.right:hover {
    background: linear-gradient(135deg, #bbdefb 0%, #90caf9 100%);
    border-color: #2196f3;
}

.side-view:hover::before {
    left: 100%;
}

.side-view .view-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    margin-bottom: 8px;
}

.side-view .view-title {
    margin-bottom: 0;
    font-size: 16px;
    font-weight: 600;
    background: none;
    border: none;
    padding: 0;
    border-radius: 0;
    display: flex;
    align-items: center;
    justify-content: space-between;
    transition: color 0.3s ease;
}

.side-view .view-title::after {
    font-size: 20px;
    transition: transform 0.3s ease;
}

.side-view.left .view-title {
    color: #e91e63;
}

.side-view.left .view-title::after {
    content: 'üî¥';
}

.side-view.right .view-title {
    color: #2196f3;
}

.side-view.right .view-title::after {
    content: 'üîµ';
}

.side-view:hover .view-title::after {
    transform: scale(1.2) rotate(10deg);
}

.side-view .view-summary {
    font-size: 14px;
    line-height: 1.5;
    color: #333333;
    cursor: pointer;
    margin-bottom: 8px;
    font-weight: 500;
}

.side-view .view-content {
    font-size: 14px;
    line-height: 1.5;
    color: #666666;
}

.side-view .toggle-icon {
    font-size: 12px;
    transition: transform 0.2s ease;
}

.side-view .toggle-icon.rotated {
    transform: rotate(180deg);
}

/* Ï†ëÏùÑ Ïàò ÏûàÎäî ÏÑπÏÖò */
.collapsible-section {
    margin-bottom: 24px;
}

.collapsible-header {
    cursor: pointer;
    user-select: none;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 16px;
    border-bottom: 1px solid #e9ecef;
    transition: all 0.3s ease;
    border-radius: 8px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 1px solid #dee2e6;
    position: relative;
    overflow: hidden;
    margin-bottom: 8px;
}

.collapsible-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    transition: left 0.5s ease;
}

.collapsible-header:hover {
    background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
    border-color: #1976d2;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(25, 118, 210, 0.15);
    color: #1976d2;
}

.collapsible-header:hover::before {
    left: 100%;
}

.collapsible-header:active {
    transform: translateY(0px);
    box-shadow: 0 2px 6px rgba(25, 118, 210, 0.2);
}

.collapsible-section .view-summary {
    font-size: 14px;
    line-height: 1.5;
    color: #333333;
    cursor: pointer;
    margin-bottom: 8px;
    font-weight: 500;
    padding: 8px 0;
}

.toggle-icon {
    font-size: 14px;
    color: #1976d2;
    transition: transform 0.3s ease;
    font-weight: bold;
}

.toggle-icon.rotated {
    transform: rotate(180deg);
}

/* ÏÑπÏÖò */
.section {
    margin-bottom: 24px;
}

.section-label {
    font-size: 14px;
    font-weight: 600;
    color: #1a1a1a;
    margin-bottom: 8px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.section-content {
    font-size: 14px;
    color: #888888;
    line-height: 1.6;
}

/* Í≤åÏù¥ÏßÄÎ∞î */
.gauge-container {
    margin-bottom: 24px;
    padding: 16px;
    background: #fafbfc;
    border-radius: 8px;
    border: 1px solid #e1e5e9;
}

.gauge-title {
    font-size: 16px;
    font-weight: 600;
    color: #1a1a1a;
    margin-bottom: 16px;
    text-align: center;
}

.gauge-bar {
    height: 24px;
    background: #f1f3f4;
    border-radius: 4px;
    overflow: hidden;
    position: relative;
    margin-bottom: 12px;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);
}

.gauge-fill {
    height: 100%;
    display: flex;
    border-radius: 4px;
    overflow: hidden;
}

.gauge-left {
    background: #1976d2;
    position: relative;
    box-shadow: 0 1px 2px rgba(25, 118, 210, 0.2);
}

.gauge-center {
    background: #9ca3af;
    position: relative;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.gauge-right {
    background: #dc3545;
    position: relative;
    box-shadow: 0 1px 2px rgba(220, 53, 69, 0.2);
}

.gauge-percentage {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-weight: 600;
    font-size: 12px;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
    z-index: 2;
    text-align: center;
    width: 100%;
}

.gauge-center .gauge-percentage {
    color: #ffffff;
    font-weight: 700;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
}

/* Background Î∂àÎ†õ Ìè¨Ïù∏Ìä∏ Ïä§ÌÉÄÏùº */
.background-bullets {
    margin: 16px 0;
}

.background-bullet-container {
    margin-bottom: 16px;
}

.background-bullet {
    padding: 12px 16px;
    background-color: #f8f9fa;
    border-radius: 8px;
    font-size: 14px;
    line-height: 1.7;
    color: #2c3e50;
    font-weight: 400;
    transition: all 0.2s ease;
    position: relative;
    word-wrap: break-word;
    overflow-wrap: break-word;
    white-space: normal;
    max-width: 100%;
}

.background-bullet:hover {
    background-color: #e3f2fd;
    transform: translateX(2px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.background-bullet:last-child {
    margin-bottom: 0;
}

/* Í∏∞ÌÉÄ Ïú†Ìã∏Î¶¨Ìã∞ */
.no-content {
    color: #999999;
    font-style: italic;
    font-size: 14px;
}

/* Î∞òÏùëÌòï ÎîîÏûêÏù∏ */
@media (max-width: 768px) {
    body {
        padding: 16px;
    }
    
    .issue-card {
        padding: 20px;
        margin-bottom: 24px;
    }
    
    .title {
        font-size: 18px;
    }
    
    .subtitle {
        font-size: 15px;
    }
    
    .side-views-container {
        flex-direction: column;
        gap: 12px;
    }
    
    .side-view {
        padding: 12px;
    }
    
    .background-bullet {
        padding: 10px 14px;
        font-size: 15px;
        margin-bottom: 12px;
    }
}
"""
    
    def _format_background(self, text: str) -> str:
        """Background ÌÖçÏä§Ìä∏ Ìè¨Îß∑ÌåÖ (ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï ÏôÑÏ†Ñ Ï†úÍ±∞, Î∂àÎ†õ Í∞Ñ Ï§ÑÎùÑÏö∞Í∏∞)"""
        if not text or not text.strip():
            return text
        
        # ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï ÏôÑÏ†Ñ Ï†úÍ±∞ (**, ‚Ä¢, <br>, #, *, - Îì±)
        import re
        formatted_text = text
        formatted_text = re.sub(r'\*\*([^*]+)\*\*', r'\1', formatted_text)  # **ÌÖçÏä§Ìä∏** ‚Üí ÌÖçÏä§Ìä∏
        formatted_text = re.sub(r'\*([^*]+)\*', r'\1', formatted_text)      # *ÌÖçÏä§Ìä∏* ‚Üí ÌÖçÏä§Ìä∏
        formatted_text = re.sub(r'#+\s*', '', formatted_text)              # # Ï†úÎ™© ‚Üí Ï†úÎ™©
        formatted_text = formatted_text.replace('‚Ä¢', '').replace('<br>', '\n').replace('*', '').replace('-', '').strip()
        
        # Í∞Å Î∂àÎ†õ Ìè¨Ïù∏Ìä∏Î•º Î≥ÑÎèÑ Ï§ÑÎ°ú Î∂ÑÎ¶¨
        lines = [line.strip() for line in formatted_text.split('\n') if line.strip()]
        
        # Î∂àÎ†õ Ìè¨Ïù∏Ìä∏Îì§ÏùÑ HTMLÎ°ú Ìè¨Îß∑ÌåÖ (Î∂àÎ†õ Í∞Ñ Ï§ÑÎùÑÏö∞Í∏∞ Ìè¨Ìï®)
        bullet_html = '<ul class="bullet-list">'
        for line in lines:
            content = line.strip()
            
            # ÎÑàÎ¨¥ Í∏¥ ÌÖçÏä§Ìä∏Îäî Ï†ÅÏ†àÌûà Ï§ÑÏûÑ (200Ïûê Ï†úÌïú)
            if len(content) > 200:
                content = content[:200] + "..."
            
            # HTML ÏÉùÏÑ± (Î∂àÎ†õ Í∞Ñ Ï§ÑÎùÑÏö∞Í∏∞ Ìè¨Ìï®)
            bullet_html += f'<li style="margin-bottom: 12px;">{content}</li>'
        
        bullet_html += '</ul>'
        return bullet_html
    
    def _generate_gauge_bar(self, stats: Dict[str, int]) -> str:
        """Í≤åÏù¥ÏßÄÎ∞î HTML ÏÉùÏÑ±"""
        total = stats.get('total', 0)
        if total == 0:
            return '<div class="gauge-bar"><div class="gauge-fill"></div></div>'
        
        left_pct = (stats.get('left', 0) / total) * 100
        center_pct = (stats.get('center', 0) / total) * 100
        right_pct = (stats.get('right', 0) / total) * 100
        
        gauge_html = '<div class="gauge-bar">'
        gauge_html += '<div class="gauge-fill">'
        
        if left_pct > 0:
            gauge_html += f'<div class="gauge-left" style="width: {left_pct}%">'
            if left_pct > 15:
                gauge_html += f'<div class="gauge-percentage">{left_pct:.0f}%</div>'
            gauge_html += '</div>'
        
        if center_pct > 0:
            gauge_html += f'<div class="gauge-center" style="width: {center_pct}%">'
            if center_pct > 15:
                gauge_html += f'<div class="gauge-percentage">{center_pct:.0f}%</div>'
            gauge_html += '</div>'
        
        if right_pct > 0:
            gauge_html += f'<div class="gauge-right" style="width: {right_pct}%">'
            if right_pct > 15:
                gauge_html += f'<div class="gauge-percentage">{right_pct:.0f}%</div>'
            gauge_html += '</div>'
        
        gauge_html += '</div></div>'
        return gauge_html
    
    def _parse_view_data(self, view_data: str) -> tuple:
        """view Îç∞Ïù¥ÌÑ∞Î•º Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏúºÎ°ú ÌååÏã±"""
        if not view_data or not view_data.strip():
            return '', ''
        
        # "Ï†úÎ™©|||ÎÇ¥Ïö©" ÌòïÌÉúÎ°ú Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞ ÌååÏã±
        if '|||' in view_data:
            parts = view_data.split('|||', 1)
            title = parts[0].strip()
            content = parts[1].strip() if len(parts) > 1 else ''
            return title, content
        else:
            # Í∏∞Ï°¥ ÌòïÌÉúÏùò Îç∞Ïù¥ÌÑ∞ (Ï†ÑÏ≤¥ ÎÇ¥Ïö©Îßå ÏûàÎäî Í≤ΩÏö∞)
            return '', view_data.strip()

    def _generate_side_views(self, issue: Dict[str, Any]) -> str:
        """Ï¢åÏö∞ Í¥ÄÏ†êÏùÑ ÎÇòÎûÄÌûà Î∞∞Ïπò (Ï≤´ Î¨∏Ïû•Îßå ÎÖ∏Ï∂ú, ÎçîÎ≥¥Í∏∞ Í∏∞Îä•)"""
        left_view = issue.get('left_view', '')
        right_view = issue.get('right_view', '')
        
        left_html = ""
        right_html = ""
        
        if left_view:
            # Ï≤òÏùå 20Í∏ÄÏûêÎßå Ï∂îÏ∂ú (Îçî Î™ÖÌôïÌïòÍ≤å)
            first_20_chars = left_view[:20] + '...' if len(left_view) > 20 else left_view
            remaining_text = left_view[20:] if len(left_view) > 20 else ""
            
            if remaining_text:
                left_html = f"""
        <div class="side-view left">
            <div class="view-title left">Ï¢åÌåå Í¥ÄÏ†ê</div>
            <div class="view-content">
                {first_20_chars}
            </div>
            <a href="#" class="view-toggle" onclick="toggleView('left-{issue['id'][:8]}'); return false;">
                ÎçîÎ≥¥Í∏∞ <span id="toggle-left-{issue['id'][:8]}">‚ñº</span>
            </a>
            <div class="view-content collapsible" id="content-left-{issue['id'][:8]}" style="display: none;">
                {self._format_content(left_view)}
            </div>
        </div>
"""
            else:
                left_html = f"""
        <div class="side-view left">
            <div class="view-title left">Ï¢åÌåå Í¥ÄÏ†ê</div>
            <div class="view-content">
                {first_20_chars}
            </div>
        </div>
"""
        
        if right_view:
            # Ï≤òÏùå 20Í∏ÄÏûêÎßå Ï∂îÏ∂ú (Îçî Î™ÖÌôïÌïòÍ≤å)
            first_20_chars = right_view[:20] + '...' if len(right_view) > 20 else right_view
            remaining_text = right_view[20:] if len(right_view) > 20 else ""
            
            if remaining_text:
                right_html = f"""
        <div class="side-view right">
            <div class="view-title right">Ïö∞Ìåå Í¥ÄÏ†ê</div>
            <div class="view-content">
                {first_20_chars}
            </div>
            <a href="#" class="view-toggle" onclick="toggleView('right-{issue['id'][:8]}'); return false;">
                ÎçîÎ≥¥Í∏∞ <span id="toggle-right-{issue['id'][:8]}">‚ñº</span>
            </a>
            <div class="view-content collapsible" id="content-right-{issue['id'][:8]}" style="display: none;">
                {self._format_content(right_view)}
            </div>
        </div>
"""
            else:
                right_html = f"""
        <div class="side-view right">
            <div class="view-title right">Ïö∞Ìåå Í¥ÄÏ†ê</div>
            <div class="view-content">
                {first_20_chars}
            </div>
        </div>
"""
        
        return f"""
        <div class="side-views-container">
            {left_html}
            {right_html}
        </div>
"""
    
    def _generate_center_view_section(self, issue: Dict[str, Any]) -> str:
        """Í≤åÏù¥ÏßÄÎ∞î ÏïÑÎûò Ï§ëÎ¶Ω Í¥ÄÏ†ê ÏÑπÏÖò ÏÉùÏÑ±"""
        center_title, center_content = self._parse_view_data(issue.get('center_view', ''))
        
        if not center_title:
            return ""
        
        return f"""
        <div class="collapsible-section">
            <div class="section-label collapsible-header" onclick="toggleCollapse('center-{issue['id'][:8]}')">
                <span>Ï§ëÎ¶Ω Í¥ÄÏ†ê</span>
                <span class="toggle-icon" id="toggle-center-{issue['id'][:8]}">‚ñº</span>
            </div>
            <div class="section-content" id="center-{issue['id'][:8]}" style="display: none;">
                <div class="view-summary" style="font-weight: 600; margin-bottom: 12px; color: #28a745;">
                    {center_title}
                </div>
                <div class="view-content" style="color: #666666; line-height: 1.6;">
                    {self._format_content(center_content)}
                </div>
            </div>
        </div>
"""
    
    def _format_content(self, content: str) -> str:
        """ÎÇ¥Ïö©ÏùÑ HTML ÌòïÏãùÏúºÎ°ú Ìè¨Îß∑ÌåÖ (ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï Ï†úÍ±∞)"""
        if not content:
            return ""
        
        # ÎßàÌÅ¨Îã§Ïö¥ Î¨∏Î≤ï Ï†úÍ±∞
        import re
        formatted = content
        formatted = re.sub(r'\*\*([^*]+)\*\*', r'\1', formatted)  # **ÌÖçÏä§Ìä∏** ‚Üí ÌÖçÏä§Ìä∏
        formatted = re.sub(r'\*([^*]+)\*', r'\1', formatted)      # *ÌÖçÏä§Ìä∏* ‚Üí ÌÖçÏä§Ìä∏
        formatted = re.sub(r'#+\s*', '', formatted)              # # Ï†úÎ™© ‚Üí Ï†úÎ™©
        formatted = formatted.replace('‚Ä¢', '').replace('<br>', '\n').replace('*', '').replace('-', '').strip()
        
        # Ï§ÑÎ∞îÍøàÏùÑ <br>Î°ú Î≥ÄÌôò
        formatted = formatted.replace('\n', '<br>')
        
        # Î¨∏Îã® Íµ¨Î∂ÑÏùÑ ÏúÑÌï¥ Ïù¥Ï§ë Ï§ÑÎ∞îÍøàÏùÑ <p> ÌÉúÍ∑∏Î°ú Î≥ÄÌôò
        paragraphs = formatted.split('<br><br>')
        formatted = '</p><p>'.join(paragraphs)
        
        if formatted:
            formatted = f'<p>{formatted}</p>'
        
        return formatted

    def _format_summary_with_toggle(self, summary: str, issue_id: str) -> str:
        """SummaryÎ•º Ï≤´ Î¨∏Ïû•Îßå ÎÖ∏Ï∂úÌïòÍ≥† ÎÇòÎ®∏ÏßÄÎäî ÎçîÎ≥¥Í∏∞Î°ú Ï≤òÎ¶¨"""
        if not summary or not summary.strip():
            return ""
        
        # Ï≤´ Î¨∏Ïû• Ï∂îÏ∂ú (ÎßàÏπ®Ìëú Í∏∞Ï§Ä)
        sentences = summary.split('.')
        if len(sentences) > 1:
            first_sentence = sentences[0] + '.'
            remaining_text = '.'.join(sentences[1:]).strip()
            if remaining_text:
                remaining_text = remaining_text[1:] if remaining_text.startswith('.') else remaining_text
        else:
            first_sentence = summary
            remaining_text = ""
        
        if not remaining_text:
            return f'<div class="summary-content">{first_sentence}</div>'
        
        return f"""
        <div class="summary-content">
            {first_sentence}
        </div>
        <a href="#" class="view-toggle" onclick="toggleView('summary-{issue_id[:8]}'); return false;">
            ÎçîÎ≥¥Í∏∞ <span id="toggle-summary-{issue_id[:8]}">‚ñº</span>
        </a>
        <div class="summary-content collapsible" id="content-summary-{issue_id[:8]}" style="display: none;">
            {remaining_text}
        </div>
"""

    def _generate_issue_card(self, issue: Dict[str, Any]) -> str:
        """Ïù¥Ïäà Ïπ¥Îìú HTML ÏÉùÏÑ±"""
        stats = self._get_article_stats(issue['id'])
        gauge_bar = self._generate_gauge_bar(stats)
        
        # ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ
        created_date = issue['created_at'][:10] if issue['created_at'] else ""
        if created_date:
            try:
                from datetime import datetime
                date_obj = datetime.strptime(created_date, '%Y-%m-%d')
                formatted_date = date_obj.strftime('%YÎÖÑ %mÏõî %dÏùº')
            except:
                formatted_date = created_date
        else:
            formatted_date = ""
        
        # Ï†úÎ™©Í≥º Î∂ÄÏ†úÎ™©ÏóêÏÑú Îî∞Ïò¥Ìëú Ï†úÍ±∞
        clean_title = str(issue['title']).strip('"').strip("'") if issue['title'] else ""
        clean_subtitle = str(issue['issue_summary']).strip('"').strip("'") if issue['issue_summary'] else ""
        
        # SummaryÎ•º Ï≤´ Î¨∏Ïû•Îßå ÎÖ∏Ï∂úÌïòÍ≥† ÎÇòÎ®∏ÏßÄÎäî ÎçîÎ≥¥Í∏∞Î°ú Ï≤òÎ¶¨
        formatted_summary = self._format_summary_with_toggle(clean_subtitle, issue['id'])
        
        return f"""
    <div class="issue-card">
        <div class="issue-header">
            <div class="meta-info">{stats['total']}Í∞ú Í∏∞ÏÇ¨ ‚àô {formatted_date}</div>
            <div class="title">{clean_title}</div>
            <div class="subtitle">{formatted_summary}</div>
        </div>
        
        {self._generate_side_views(issue)}
        
        <div class="gauge-container">
            <div class="gauge-title">Ïñ∏Î°†ÏÇ¨ ÏÑ±Ìñ•Î≥Ñ Î≥¥ÎèÑ ÎπÑÏú®</div>
            {gauge_bar}
        </div>
        
        {self._generate_center_view_section(issue)}
        
        <div class="collapsible-section">
            <div class="section-label collapsible-header" onclick="toggleCollapse('background-{issue['id'][:8]}')">
                <span>Î∞∞Í≤Ω Ï†ïÎ≥¥</span>
                <span class="toggle-icon" id="toggle-background-{issue['id'][:8]}">‚ñº</span>
            </div>
            <div class="section-content" id="background-{issue['id'][:8]}" style="display: none;">
                {self._format_background(issue.get('issue_timeline', ''))}
            </div>
        </div>
    </div>
"""
    
    def save_report(self, html: str, filename: str = None) -> str:
        """HTML ÌååÏùº Ï†ÄÏû•"""
        if filename is None:
            filename = self.generate_filename()
        
        file_path = self.reports_dir / filename
        
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(html)
            return str(file_path)
        except Exception as e:
            console.print(f"‚ùå ÌååÏùº Ï†ÄÏû• Ïã§Ìå®: {str(e)}")
            return None
    
    def generate_html(self) -> str:
        """Ï†ÑÏ≤¥ HTML ÏÉùÏÑ±"""
        try:
            # Ïù¥Ïäà Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (source 30Í∞ú Ïù¥ÏÉÅÎßå)
            result = self.supabase_manager.client.table('issues').select(
                'id, title, issue_summary, issue_timeline, left_view, center_view, right_view, created_at, source'
            ).order('source', desc=True).execute()
            
            # sourceÍ∞Ä 30Í∞ú Ïù¥ÏÉÅÏù∏ Ïù¥ÏäàÎßå ÌïÑÌÑ∞ÎßÅ (Î¨∏ÏûêÏó¥ÏùÑ Ï†ïÏàòÎ°ú Î≥ÄÌôòÌïòÏó¨ ÎπÑÍµê)
            filtered_issues = []
            for issue in result.data:
                try:
                    source_count = int(issue['source'])
                    if source_count >= 30:
                        filtered_issues.append(issue)
                except (ValueError, TypeError):
                    continue
            
            result.data = filtered_issues
            
            if not result.data:
                console.print("‚ùå Ïù¥Ïäà Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
                return None
            
            console.print(f"‚úÖ {len(result.data)}Í∞ú Ïù¥Ïäà Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏôÑÎ£å")
            
            # Í∞Å Ïù¥ÏäàÏóê ÌÜµÍ≥Ñ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
            for issue in result.data:
                stats = self._get_article_stats(issue['id'])
                issue['total_articles'] = stats['total']
            
            # Î™®Îì† Ïù¥Ïäà Ìè¨Ìï® (ÌïÑÌÑ∞ÎßÅ Ï†úÍ±∞)
            filtered_issues = result.data
            console.print(f"‚úÖ Î™®Îì† Ïù¥Ïäà Ìè¨Ìï®: {len(filtered_issues)}Í∞ú")
            
            # source ÏàúÏúºÎ°ú Ï†ïÎ†¨
            filtered_issues.sort(key=lambda x: x.get('total_articles', 0), reverse=True)
            console.print("‚úÖ source ÏàúÏúºÎ°ú Ï†ïÎ†¨ ÏôÑÎ£å")
            
            # HTML ÏÉùÏÑ±
            html = f"""<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ï†ïÏπò Ïù¥Ïäà Î≥¥Í≥†ÏÑú</title>
    <style>
        {self._get_default_css()}
    </style>
</head>
<body>
    <div class="header">
        <h1>Ï†ïÏπò Ïù¥Ïäà Î≥¥Í≥†ÏÑú</h1>
        <div class="subtitle">Ïñ∏Î°†ÏÇ¨ ÏÑ±Ìñ•Î≥Ñ Î∂ÑÏÑù</div>
    </div>
    
    {''.join([self._generate_issue_card(issue) for issue in filtered_issues])}
    
    <script>
        function toggleCollapse(elementId) {{
            const content = document.getElementById(elementId);
            const toggleIcon = document.getElementById('toggle-' + elementId);
            
            if (content.style.display === 'none') {{
                content.style.display = 'block';
                toggleIcon.textContent = '‚ñ≤';
                toggleIcon.classList.add('rotated');
            }} else {{
                content.style.display = 'none';
                toggleIcon.textContent = '‚ñº';
                toggleIcon.classList.remove('rotated');
            }}
        }}
        
        function toggleView(viewId) {{
            const content = document.getElementById('content-' + viewId);
            const toggleIcon = document.getElementById('toggle-' + viewId);
            
            if (content.style.display === 'none') {{
                content.style.display = 'block';
                toggleIcon.textContent = '‚ñ≤';
                toggleIcon.classList.add('rotated');
            }} else {{
                content.style.display = 'none';
                toggleIcon.textContent = '‚ñº';
                toggleIcon.classList.remove('rotated');
            }}
        }}
    </script>
</body>
</html>"""
            
            return html
            
        except Exception as e:
            console.print(f"‚ùå HTML ÏÉùÏÑ± Ïã§Ìå®: {str(e)}")
            return None
    
    def generate_report(self) -> bool:
        """Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Î©îÏù∏ Ìï®Ïàò"""
        try:
            console.print("üöÄ Ï†ïÏπò Ïù¥Ïäà HTML Î≥¥Í≥†ÏÑú ÏÉùÏÑ±Í∏∞ ÏãúÏûë")
            
            # HTML ÏÉùÏÑ±
            html = self.generate_html()
            if not html:
                return False
            
            # ÌååÏùº Ï†ÄÏû•
            file_path = self.save_report(html)
            if not file_path:
                return False
            
            console.print(f"‚úÖ Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏôÑÎ£å: {Path(file_path).name}")
            console.print(f"üìÅ Ï†ÄÏû• ÏúÑÏπò: {file_path}")
            console.print("üéâ Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏôÑÎ£å!")
            console.print(f"üì± Î™®Î∞îÏùºÏóêÏÑú ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî: {file_path}")
            
            return True
            
        except Exception as e:
            console.print(f"‚ùå Î≥¥Í≥†ÏÑú ÏÉùÏÑ± Ïã§Ìå®: {str(e)}")
            return False


def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    try:
        generator = ReportGenerator()
        success = generator.generate_report()
        
        if not success:
            sys.exit(1)
            
    except KeyboardInterrupt:
        console.print("\nüëã ÏÇ¨Ïö©ÏûêÏóê ÏùòÌï¥ Ï§ëÎã®ÎêòÏóàÏäµÎãàÎã§.")
        sys.exit(1)
    except Exception as e:
        console.print(f"\n‚ùå Ïò§Î•ò Î∞úÏÉù: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()